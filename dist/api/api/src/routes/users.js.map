{
  "version": 3,
  "sources": ["../../../../../api/src/routes/users.js"],
  "sourcesContent": ["'use strict';\n\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst Admin = require('../models/Admin');\nconst { auth } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// List users (admins)\nrouter.get('/', auth, async (_req, res) => {\n  const items = await Admin.find({}, { passwordHash: 0 }).sort({ createdAt: -1 });\n  res.json(items);\n});\n\n// Create user\nrouter.post('/', auth, async (req, res) => {\n  const { email, password, role } = req.body || {};\n  if (!email || !password) return res.status(400).json({ error: 'email and password are required' });\n  const passwordHash = await bcrypt.hash(password, 10);\n  try {\n    const created = await Admin.create({ email: String(email).toLowerCase().trim(), passwordHash, role: role || 'admin' });\n    const out = created.toObject();\n    delete out.passwordHash;\n    res.status(201).json(out);\n  } catch (e) {\n    if (e.code === 11000) return res.status(409).json({ error: 'email already exists' });\n    throw e;\n  }\n});\n\n// Update user (email and/or password)\nrouter.put('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const { email, password, role } = req.body || {};\n  const update = {};\n  if (email) update.email = String(email).toLowerCase().trim();\n  if (role) update.role = role;\n  if (password) update.passwordHash = await bcrypt.hash(password, 10);\n\n  const updated = await Admin.findByIdAndUpdate(id, { $set: update }, { new: true, projection: { passwordHash: 0 } });\n  if (!updated) return res.status(404).json({ error: 'not found' });\n  res.json(updated);\n});\n\n// Delete user\nrouter.delete('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const del = await Admin.findByIdAndDelete(id);\n  if (!del) return res.status(404).json({ error: 'not found' });\n  res.json({ ok: true });\n});\n\nmodule.exports = router;\n\n"],
  "mappings": ";AAEA,MAAM,UAAU,QAAQ,SAAS;AACjC,MAAM,SAAS,QAAQ,UAAU;AACjC,MAAM,QAAQ,QAAQ,iBAAiB;AACvC,MAAM,EAAE,KAAK,IAAI,QAAQ,oBAAoB;AAE7C,MAAM,SAAS,QAAQ,OAAO;AAG9B,OAAO,IAAI,KAAK,MAAM,OAAO,MAAM,QAAQ;AACzC,QAAM,QAAQ,MAAM,MAAM,KAAK,CAAC,GAAG,EAAE,cAAc,EAAE,CAAC,EAAE,KAAK,EAAE,WAAW,GAAG,CAAC;AAC9E,MAAI,KAAK,KAAK;AAChB,CAAC;AAGD,OAAO,KAAK,KAAK,MAAM,OAAO,KAAK,QAAQ;AACzC,QAAM,EAAE,OAAO,UAAU,KAAK,IAAI,IAAI,QAAQ,CAAC;AAC/C,MAAI,CAAC,SAAS,CAAC;AAAU,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,kCAAkC,CAAC;AACjG,QAAM,eAAe,MAAM,OAAO,KAAK,UAAU,EAAE;AACnD,MAAI;AACF,UAAM,UAAU,MAAM,MAAM,OAAO,EAAE,OAAO,OAAO,KAAK,EAAE,YAAY,EAAE,KAAK,GAAG,cAAc,MAAM,QAAQ,QAAQ,CAAC;AACrH,UAAM,MAAM,QAAQ,SAAS;AAC7B,WAAO,IAAI;AACX,QAAI,OAAO,GAAG,EAAE,KAAK,GAAG;AAAA,EAC1B,SAAS,GAAG;AACV,QAAI,EAAE,SAAS;AAAO,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,uBAAuB,CAAC;AACnF,UAAM;AAAA,EACR;AACF,CAAC;AAGD,OAAO,IAAI,QAAQ,MAAM,OAAO,KAAK,QAAQ;AAC3C,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,QAAM,EAAE,OAAO,UAAU,KAAK,IAAI,IAAI,QAAQ,CAAC;AAC/C,QAAM,SAAS,CAAC;AAChB,MAAI;AAAO,WAAO,QAAQ,OAAO,KAAK,EAAE,YAAY,EAAE,KAAK;AAC3D,MAAI;AAAM,WAAO,OAAO;AACxB,MAAI;AAAU,WAAO,eAAe,MAAM,OAAO,KAAK,UAAU,EAAE;AAElE,QAAM,UAAU,MAAM,MAAM,kBAAkB,IAAI,EAAE,MAAM,OAAO,GAAG,EAAE,KAAK,MAAM,YAAY,EAAE,cAAc,EAAE,EAAE,CAAC;AAClH,MAAI,CAAC;AAAS,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,YAAY,CAAC;AAChE,MAAI,KAAK,OAAO;AAClB,CAAC;AAGD,OAAO,OAAO,QAAQ,MAAM,OAAO,KAAK,QAAQ;AAC9C,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,QAAM,MAAM,MAAM,MAAM,kBAAkB,EAAE;AAC5C,MAAI,CAAC;AAAK,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,YAAY,CAAC;AAC5D,MAAI,KAAK,EAAE,IAAI,KAAK,CAAC;AACvB,CAAC;AAED,OAAO,UAAU;",
  "names": []
}
