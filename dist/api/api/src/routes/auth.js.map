{
  "version": 3,
  "sources": ["../../../../../api/src/routes/auth.js"],
  "sourcesContent": ["'use strict';\n\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst nodemailer = require('nodemailer');\nconst Admin = require('../models/Admin');\n\nconst router = express.Router();\n\nfunction signToken(admin) {\n  const secret = process.env.JWT_SECRET || 'dev-secret-change-me';\n  const payload = { sub: String(admin._id), role: 'admin', email: admin.email };\n  return jwt.sign(payload, secret, { algorithm: 'HS256', expiresIn: '1d' });\n}\n\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body || {};\n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password are required' });\n    }\n    const admin = await Admin.findOne({ email: String(email).toLowerCase().trim() });\n    if (!admin) return res.status(401).json({ error: 'Invalid credentials' });\n\n    const ok = await bcrypt.compare(password, admin.passwordHash);\n    if (!ok) return res.status(401).json({ error: 'Invalid credentials' });\n\n    const token = signToken(admin);\n    return res.json({ token, user: { email: admin.email, role: admin.role } });\n  } catch (err) {\n    console.error('Login error', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nrouter.get('/me', (req, res) => {\n  try {\n    const auth = req.headers.authorization || '';\n    const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;\n    if (!token) return res.status(401).json({ error: 'Missing token' });\n    const payload = jwt.verify(token, process.env.JWT_SECRET || 'dev-secret-change-me');\n    return res.json({ user: { email: payload.email, role: payload.role } });\n  } catch (err) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n});\n\n// Issue password reset token and send email if SMTP is configured\nrouter.post('/forgot', async (req, res) => {\n  const { email } = req.body || {};\n  if (!email) return res.status(400).json({ error: 'email is required' });\n  const admin = await Admin.findOne({ email: String(email).toLowerCase().trim() });\n  // Always respond ok to avoid email enumeration\n  if (!admin) return res.json({ ok: true });\n\n  const secret = process.env.JWT_SECRET || 'dev-secret-change-me';\n  const token = jwt.sign({ sub: String(admin._id), type: 'reset', email: admin.email }, secret, {\n    algorithm: 'HS256',\n    expiresIn: '1h',\n  });\n\n  const host = process.env.SMTP_HOST;\n  const user = process.env.SMTP_USER;\n  const pass = process.env.SMTP_PASS;\n  const from = process.env.SMTP_FROM || user;\n  const port = Number(process.env.SMTP_PORT || 465);\n  const secure = String(process.env.SMTP_SECURE || 'true') === 'true';\n\n  if (host && user && pass && from) {\n    try {\n      const transporter = nodemailer.createTransport({ host, port, secure, auth: { user, pass } });\n      const web = process.env.WEB_URL ? String(process.env.WEB_URL).replace(/\\/$/, '') : '';\n      const link = web ? `${web}/reset?token=${encodeURIComponent(token)}` : null;\n      const text = link\n        ? `You requested a password reset. Click this link to reset your password: ${link}\\nIf you did not request this, you can ignore this email.`\n        : `Use this password reset token: ${token}`;\n      await transporter.sendMail({\n        from,\n        to: admin.email,\n        subject: 'Reset your password',\n        text,\n      });\n      return res.json({ ok: true });\n    } catch (err) {\n      console.error('Failed to send reset email', err);\n      // Fall back to returning token for dev convenience\n      return res.json({ ok: true, token });\n    }\n  }\n\n  // If SMTP not configured, return token for dev\n  return res.json({ ok: true, token });\n});\n\n// Reset password using token\nrouter.post('/reset', async (req, res) => {\n  const { token, password } = req.body || {};\n  if (!token || !password) return res.status(400).json({ error: 'token and password are required' });\n  try {\n    const secret = process.env.JWT_SECRET || 'dev-secret-change-me';\n    const payload = jwt.verify(token, secret);\n    if (payload.type !== 'reset') return res.status(400).json({ error: 'invalid token type' });\n    const admin = await Admin.findById(payload.sub);\n    if (!admin) return res.status(404).json({ error: 'user not found' });\n    const bcrypt = require('bcryptjs');\n    admin.passwordHash = await bcrypt.hash(password, 10);\n    await admin.save();\n    return res.json({ ok: true });\n  } catch (err) {\n    return res.status(400).json({ error: 'invalid or expired token' });\n  }\n});\n\nmodule.exports = router;\n\n"],
  "mappings": "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",
  "names": ["bcrypt"]
}
