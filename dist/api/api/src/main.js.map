{
  "version": 3,
  "sources": ["../../../../api/src/main.js"],
  "sourcesContent": ["'use strict';\n\nconst express = require('express');\nconst dotenv = require('dotenv');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\n\nconst authRouter = require('./routes/auth');\nconst documentsRouter = require('./routes/documents');\nconst usersRouter = require('./routes/users');\nconst categoriesRouter = require('./routes/categories');\nconst { auth } = require('./middleware/auth');\n\ndotenv.config();\n\nconst host = process.env.HOST || 'localhost';\nconst port = process.env.PORT ? Number(process.env.PORT) : 3000;\nconst mongoUri = process.env.MONGODB_URI || '';\n\nasync function start() {\n  if (!mongoUri) {\n    console.error('MONGODB_URI is not set.');\n    process.exit(1);\n  }\n\n  try {\n    await mongoose.connect(mongoUri);\n    console.log('Connected to MongoDB');\n  } catch (err) {\n    console.error('Mongo connect failed', err);\n    process.exit(1);\n  }\n\n  const app = express();\n  app.use(express.json());\n  app.use(\n    cors({\n      origin: [/^http:\\/\\/localhost(?::\\d+)?$/, /^http:\\/\\/127\\.0\\.0\\.1(?::\\d+)?$/],\n      credentials: false,\n    })\n  );\n\n  app.use('/auth', authRouter);\n  app.use('/documents', documentsRouter);\n  app.use('/users', usersRouter);\n  app.use('/categories', categoriesRouter);\n  app.get('/stats', auth, async (_req, res) => {\n    const Document = require('./models/Document');\n    const Admin = require('./models/Admin');\n    const start = new Date(); start.setHours(0, 0, 0, 0);\n    const end = new Date(); end.setHours(23, 59, 59, 999);\n    const [documentsTotal, documentsToday, usersTotal] = await Promise.all([\n      Document.countDocuments({}),\n      Document.countDocuments({ createdAt: { $gte: start, $lte: end } }),\n      Admin.countDocuments({}),\n    ]);\n    res.json({ documentsTotal, documentsToday, usersTotal });\n  });\n\n  app.get('/health', (_req, res) => {\n    res.send({ ok: true });\n  });\n\n  app.get('/', (_req, res) => {\n    res.send({ message: 'API is running' });\n  });\n\n  app.listen(port, host, () => {\n    console.log(`[ ready ] http://${host}:${port}`);\n  });\n}\n\nstart();\n\n"],
  "mappings": ";AAEA,MAAM,UAAU,QAAQ,SAAS;AACjC,MAAM,SAAS,QAAQ,QAAQ;AAC/B,MAAM,WAAW,QAAQ,UAAU;AACnC,MAAM,OAAO,QAAQ,MAAM;AAE3B,MAAM,aAAa,QAAQ,eAAe;AAC1C,MAAM,kBAAkB,QAAQ,oBAAoB;AACpD,MAAM,cAAc,QAAQ,gBAAgB;AAC5C,MAAM,mBAAmB,QAAQ,qBAAqB;AACtD,MAAM,EAAE,KAAK,IAAI,QAAQ,mBAAmB;AAE5C,OAAO,OAAO;AAEd,MAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,QAAQ,IAAI,IAAI,IAAI;AAC3D,MAAM,WAAW,QAAQ,IAAI,eAAe;AAE5C,eAAe,QAAQ;AACrB,MAAI,CAAC,UAAU;AACb,YAAQ,MAAM,yBAAyB;AACvC,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,MAAI;AACF,UAAM,SAAS,QAAQ,QAAQ;AAC/B,YAAQ,IAAI,sBAAsB;AAAA,EACpC,SAAS,KAAK;AACZ,YAAQ,MAAM,wBAAwB,GAAG;AACzC,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,QAAM,MAAM,QAAQ;AACpB,MAAI,IAAI,QAAQ,KAAK,CAAC;AACtB,MAAI;AAAA,IACF,KAAK;AAAA,MACH,QAAQ,CAAC,iCAAiC,kCAAkC;AAAA,MAC5E,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AAEA,MAAI,IAAI,SAAS,UAAU;AAC3B,MAAI,IAAI,cAAc,eAAe;AACrC,MAAI,IAAI,UAAU,WAAW;AAC7B,MAAI,IAAI,eAAe,gBAAgB;AACvC,MAAI,IAAI,UAAU,MAAM,OAAO,MAAM,QAAQ;AAC3C,UAAM,WAAW,QAAQ,mBAAmB;AAC5C,UAAM,QAAQ,QAAQ,gBAAgB;AACtC,UAAMA,SAAQ,oBAAI,KAAK;AAAG,IAAAA,OAAM,SAAS,GAAG,GAAG,GAAG,CAAC;AACnD,UAAM,MAAM,oBAAI,KAAK;AAAG,QAAI,SAAS,IAAI,IAAI,IAAI,GAAG;AACpD,UAAM,CAAC,gBAAgB,gBAAgB,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,MACrE,SAAS,eAAe,CAAC,CAAC;AAAA,MAC1B,SAAS,eAAe,EAAE,WAAW,EAAE,MAAMA,QAAO,MAAM,IAAI,EAAE,CAAC;AAAA,MACjE,MAAM,eAAe,CAAC,CAAC;AAAA,IACzB,CAAC;AACD,QAAI,KAAK,EAAE,gBAAgB,gBAAgB,WAAW,CAAC;AAAA,EACzD,CAAC;AAED,MAAI,IAAI,WAAW,CAAC,MAAM,QAAQ;AAChC,QAAI,KAAK,EAAE,IAAI,KAAK,CAAC;AAAA,EACvB,CAAC;AAED,MAAI,IAAI,KAAK,CAAC,MAAM,QAAQ;AAC1B,QAAI,KAAK,EAAE,SAAS,iBAAiB,CAAC;AAAA,EACxC,CAAC;AAED,MAAI,OAAO,MAAM,MAAM,MAAM;AAC3B,YAAQ,IAAI,oBAAoB,IAAI,IAAI,IAAI,EAAE;AAAA,EAChD,CAAC;AACH;AAEA,MAAM;",
  "names": ["start"]
}
