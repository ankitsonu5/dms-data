{
  "version": 3,
  "sources": ["../../../../../api/src/routes/categories.js"],
  "sourcesContent": ["'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst Category = require('../models/Category');\nconst { auth } = require('../middleware/auth');\n\n// List all categories (sorted by name)\nrouter.get('/', auth, async (_req, res) => {\n  const cats = await Category.find().sort({ name: 1 });\n  res.json(cats);\n});\n\n// Create category\nrouter.post('/', auth, async (req, res) => {\n  const { name } = req.body;\n  if (!name || !String(name).trim()) return res.status(400).json({ error: 'Name required' });\n  try {\n    const created = await Category.create({ name: String(name).trim() });\n    res.status(201).json(created);\n  } catch (e) {\n    if (e.code === 11000) return res.status(409).json({ error: 'Category already exists' });\n    res.status(500).json({ error: 'Failed to create category' });\n  }\n});\n\n// Update category\nrouter.put('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const { name } = req.body;\n  if (!name || !String(name).trim()) return res.status(400).json({ error: 'Name required' });\n  try {\n    const updated = await Category.findByIdAndUpdate(\n      id,\n      { $set: { name: String(name).trim() } },\n      { new: true }\n    );\n    if (!updated) return res.status(404).json({ error: 'Not found' });\n    res.json(updated);\n  } catch (e) {\n    if (e.code === 11000) return res.status(409).json({ error: 'Category already exists' });\n    res.status(500).json({ error: 'Failed to update category' });\n  }\n});\n\n// Delete category\nrouter.delete('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const deleted = await Category.findByIdAndDelete(id);\n  if (!deleted) return res.status(404).json({ error: 'Not found' });\n  res.json({ ok: true });\n});\n\nmodule.exports = router;\n\n"],
  "mappings": ";AAEA,MAAM,UAAU,QAAQ,SAAS;AACjC,MAAM,SAAS,QAAQ,OAAO;AAC9B,MAAM,WAAW,QAAQ,oBAAoB;AAC7C,MAAM,EAAE,KAAK,IAAI,QAAQ,oBAAoB;AAG7C,OAAO,IAAI,KAAK,MAAM,OAAO,MAAM,QAAQ;AACzC,QAAM,OAAO,MAAM,SAAS,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;AACnD,MAAI,KAAK,IAAI;AACf,CAAC;AAGD,OAAO,KAAK,KAAK,MAAM,OAAO,KAAK,QAAQ;AACzC,QAAM,EAAE,KAAK,IAAI,IAAI;AACrB,MAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,KAAK;AAAG,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,gBAAgB,CAAC;AACzF,MAAI;AACF,UAAM,UAAU,MAAM,SAAS,OAAO,EAAE,MAAM,OAAO,IAAI,EAAE,KAAK,EAAE,CAAC;AACnE,QAAI,OAAO,GAAG,EAAE,KAAK,OAAO;AAAA,EAC9B,SAAS,GAAG;AACV,QAAI,EAAE,SAAS;AAAO,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,0BAA0B,CAAC;AACtF,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,4BAA4B,CAAC;AAAA,EAC7D;AACF,CAAC;AAGD,OAAO,IAAI,QAAQ,MAAM,OAAO,KAAK,QAAQ;AAC3C,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,QAAM,EAAE,KAAK,IAAI,IAAI;AACrB,MAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,KAAK;AAAG,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,gBAAgB,CAAC;AACzF,MAAI;AACF,UAAM,UAAU,MAAM,SAAS;AAAA,MAC7B;AAAA,MACA,EAAE,MAAM,EAAE,MAAM,OAAO,IAAI,EAAE,KAAK,EAAE,EAAE;AAAA,MACtC,EAAE,KAAK,KAAK;AAAA,IACd;AACA,QAAI,CAAC;AAAS,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,YAAY,CAAC;AAChE,QAAI,KAAK,OAAO;AAAA,EAClB,SAAS,GAAG;AACV,QAAI,EAAE,SAAS;AAAO,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,0BAA0B,CAAC;AACtF,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,4BAA4B,CAAC;AAAA,EAC7D;AACF,CAAC;AAGD,OAAO,OAAO,QAAQ,MAAM,OAAO,KAAK,QAAQ;AAC9C,QAAM,EAAE,GAAG,IAAI,IAAI;AACnB,QAAM,UAAU,MAAM,SAAS,kBAAkB,EAAE;AACnD,MAAI,CAAC;AAAS,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,YAAY,CAAC;AAChE,MAAI,KAAK,EAAE,IAAI,KAAK,CAAC;AACvB,CAAC;AAED,OAAO,UAAU;",
  "names": []
}
