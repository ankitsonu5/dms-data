{
  "version": 3,
  "sources": ["../../../../api/src/seed-admin.js"],
  "sourcesContent": ["'use strict';\n\nconst dotenv = require('dotenv');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst Admin = require('./models/Admin');\n\ndotenv.config();\n\nasync function run() {\n  const mongoUri = process.env.MONGODB_URI;\n  const email = (process.env.ADMIN_EMAIL || '').toLowerCase().trim();\n  const password = process.env.ADMIN_PASSWORD || '';\n\n  if (!mongoUri) throw new Error('MONGODB_URI is not set');\n  if (!email || !password) throw new Error('ADMIN_EMAIL or ADMIN_PASSWORD not set');\n\n  await mongoose.connect(mongoUri);\n  console.log('Connected to MongoDB');\n\n  const passwordHash = await bcrypt.hash(password, 10);\n\n  const result = await Admin.findOneAndUpdate(\n    { email },\n    { email, passwordHash, role: 'admin' },\n    { upsert: true, new: true, setDefaultsOnInsert: true }\n  );\n\n  console.log('Admin upserted:', { email: result.email, id: result._id.toString() });\n  await mongoose.disconnect();\n}\n\nrun().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n\n"],
  "mappings": ";AAEA,MAAM,SAAS,QAAQ,QAAQ;AAC/B,MAAM,WAAW,QAAQ,UAAU;AACnC,MAAM,SAAS,QAAQ,UAAU;AACjC,MAAM,QAAQ,QAAQ,gBAAgB;AAEtC,OAAO,OAAO;AAEd,eAAe,MAAM;AACnB,QAAM,WAAW,QAAQ,IAAI;AAC7B,QAAM,SAAS,QAAQ,IAAI,eAAe,IAAI,YAAY,EAAE,KAAK;AACjE,QAAM,WAAW,QAAQ,IAAI,kBAAkB;AAE/C,MAAI,CAAC;AAAU,UAAM,IAAI,MAAM,wBAAwB;AACvD,MAAI,CAAC,SAAS,CAAC;AAAU,UAAM,IAAI,MAAM,uCAAuC;AAEhF,QAAM,SAAS,QAAQ,QAAQ;AAC/B,UAAQ,IAAI,sBAAsB;AAElC,QAAM,eAAe,MAAM,OAAO,KAAK,UAAU,EAAE;AAEnD,QAAM,SAAS,MAAM,MAAM;AAAA,IACzB,EAAE,MAAM;AAAA,IACR,EAAE,OAAO,cAAc,MAAM,QAAQ;AAAA,IACrC,EAAE,QAAQ,MAAM,KAAK,MAAM,qBAAqB,KAAK;AAAA,EACvD;AAEA,UAAQ,IAAI,mBAAmB,EAAE,OAAO,OAAO,OAAO,IAAI,OAAO,IAAI,SAAS,EAAE,CAAC;AACjF,QAAM,SAAS,WAAW;AAC5B;AAEA,IAAI,EAAE,MAAM,CAAC,QAAQ;AACnB,UAAQ,MAAM,GAAG;AACjB,UAAQ,KAAK,CAAC;AAChB,CAAC;",
  "names": []
}
